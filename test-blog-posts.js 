<!--
Add integration tests for all 4 of the API endpoints.
The integration tests should use the strategy described (
1-set up db in known state
2-make a request to API
3-inspect response
4-inspect state of db, tear down db).
Write tests for the normal case for each endpoint.
-->


const chai = require('chai');
const chaiHttp = require('chai-http');
const faker = require('faker');
const mongoose = require('mongoose');

const should = chai.should();



const {DATABASE_URL} = require('../config');
const {BlogPost} = require('../models');
const {closeServer, runServer, app} = require('../server');
const {TEST_DATABASE_URL} = require('../config');


chai.use(chaiHttp);
var app = server.app;



function tearDownDb() {
return new Promise((resolve, reject) => {
console.warn('Deleting database');
mongoose.connection.dropDatabase()
.then(result => resolve(result))
.catch(err => reject(err))
});
}

function seedBlogPostData() {
console.info('seeding blog post data');
const seedData = [];
for (let i=1; i<=10; i++) {
seedData.push({
author: {
firstName: faker.name.firstName(),
lastName: faker.name.lastName()
},
title: faker.lorem.sentence(),
content: faker.lorem.text()
});
}
// this will return a promise
return BlogPost.insertMany(seedData);
}


describe('blog posts API resource', function() {

before(function() {
return runServer(TEST_DATABASE_URL);
});

beforeEach(function() {
return seedBlogPostData();
});

afterEach(function() {
// tear down database so we ensure no state from this test
// effects any coming after.
return tearDownDb();
});

after(function() {
return closeServer();
});

